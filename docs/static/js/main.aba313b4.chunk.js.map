{"version":3,"sources":["Utilities/Firebase/firebase.js","Utilities/Modal/Modal.js","Utilities/Modal/useModal.js","Components/Sidebar/SidebarChat.js","Utilities/Redux/StateProvider.js","Components/Sidebar/Sidebar.js","Components/ChatPage/Chat.js","Utilities/Redux/reducer.js","Components/LoginPage/Login.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","timestamp","FieldValue","serverTimestamp","Modal","title","content","visible","hide","confirm","ReactDOM","createPortal","Fragment","className","onClick","document","body","useModal","useState","isShowing","setIsShowing","toggle","SidebarChat","addNewChat","id","name","messages","setMessages","lastMessageTime","setLastMessageTime","history","useHistory","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","error","console","lastMesgTime","Date","time","toDate","displayTime","getHours","getMinutes","roomName","prompt","add","to","Avatar","src","message","event","preventDefault","push","delete","then","log","catch","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","displayName","localStorage","clear","window","location","reload","IconButton","room","key","Chat","input","setInput","roomId","useParams","setRoomName","lastTime","setLastTime","length","getMonth","getDate","index","t","messageSendTime","Input","disableUnderline","onChange","e","target","maxLength","type","trim","JSON","parse","getItem","actionTypes","state","action","setItem","stringify","Login","dispatch","email","setEmail","password","setPassword","setName","loginVisible","setLoginVisible","switchLogin","Paper","Grid","container","direction","Typography","variant","placeholder","Button","signInWithEmailAndPassword","result","alert","createUserWithEmailAndPassword","updateProfile","App","darkmode","setDarkMode","darkTheme","createMuiTheme","palette","background","paper","ThemeProvider","theme","color","checked","path","Boolean","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAcMA,EADcC,IAASC,cAXN,CACtBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIOC,YACjBC,EAAOX,IAASW,OAChBC,EAAYZ,IAASU,UAAUG,WAAWC,kB,uDCajCC,MAzBf,YAA4D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC/C,OAAOF,EACJG,IAASC,aACT,kBAAC,IAAMC,SAAP,KACC,yBAAKC,UAAU,iBACd,yBAAKA,UAAU,SACd,yBAAKA,UAAU,eAAeR,GAC9B,yBAAKQ,UAAU,iBAAiBP,GAChC,yBAAKO,UAAU,kBACd,4BAAQA,UAAU,yBAAyBC,QAASL,GAApD,gBAGA,4BAAQI,UAAU,uBAAuBC,QAASN,GAAlD,kBAKF,yBAAKK,UAAU,WAGjBE,SAASC,MAET,MCXWC,EAbE,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACfC,EADe,KACJC,EADI,KAOtB,MAAO,CACND,YACAE,OAND,WACCD,GAAcD,MCgGDG,MA5Ff,YAAgD,IAAD,EAAxBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,KAAQ,EACdP,mBAAS,IADK,mBACvCQ,EADuC,KAC7BC,EAD6B,OAEAT,mBAAS,IAFT,mBAEvCU,EAFuC,KAEtBC,EAFsB,OAGhBZ,IAAtBE,EAHsC,EAGtCA,UAAWE,EAH2B,EAG3BA,OACfS,EAAUC,cAuDd,OA5CAC,qBAAU,WACLR,GACHpC,EAAG6C,WAAW,SACZC,IAAIV,GACJS,WAAW,WACXE,QAAQ,OAAQ,QAChBC,YACA,SAACC,GAAD,OAAcV,EAAYU,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,cACzD,SAACC,GACAC,QAAQD,MAAM,sCAAuCjB,EAAIiB,QAI3D,CAACjB,IAEJQ,qBAAU,WAAO,IAAD,IACTW,EAAe,IAAIC,KAAJ,UAASlB,EAAS,UAAlB,iBAAS,EAAamB,YAAtB,aAAS,EAAmBC,UAC3CC,EAEW,gBAAhBJ,EACG,IACCA,EAAaK,WAAa,GAAK,IAAM,IACtCL,EAAaK,WACb,KACCL,EAAaM,aAAe,GAAK,IAAM,IACxCN,EAAaM,aAEjBpB,EAAmBkB,KACjB,CAACrB,IAgBIH,EA2BP,yBAAKT,QAhFa,WAClB,IAAMoC,EAAWC,OAAO,8CACpBD,GACH9D,EAAG6C,WAAW,SAASmB,IAAI,CAC1B3B,KAAMyB,KA4EkBrC,UAAU,eACnC,kBAAC,IAAD,MADD,IACgB,8DA3BhB,kBAAC,IAAD,CAAMwC,GAAE,oBAAe7B,IACtB,yBAAKX,UAAU,eACd,kBAACyC,EAAA,EAAD,CAAQC,IAAG,qDAAgD/B,EAAhD,UACX,yBAAKX,UAAU,qBACd,yBAAKA,UAAU,yBAAyBY,GACxC,yBAAKZ,UAAU,4BACd,yBAAKA,UAAU,4BAAf,UACEa,EAAS,UADX,aACE,EAAa8B,SAEf,yBAAK3C,UAAU,0BAA0Be,GACzC,yBAAKf,UAAU,sBAAsBC,QAASO,GAC7C,kBAAC,IAAD,MACA,kBAAC,EAAD,CACCd,QAASY,EACTX,KAAMa,EACNhB,MAAM,eACN6C,SAAUzB,EACVnB,QAAO,yCAAWmB,EAAX,6BACPhB,QAjCe,SAACgD,GACtBA,EAAMC,iBACN5B,EAAQ6B,KAAK,aACbvE,EAAG6C,WAAW,SACZC,IAAIV,GACJoC,SACAC,MAAK,WACLnB,QAAQoB,IAAI,qCAEZC,OAAM,SAACtB,GACPC,QAAQD,MAAM,4BAA6BA,eC/DlCuB,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC5B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAChDC,IAIUI,EAAgB,kBAAMC,qBAAWV,IC0D/BW,MA3Df,WAAoB,IAAD,EACQzD,mBAAS,IADjB,mBACX0D,EADW,KACJC,EADI,OAECJ,IAAVK,EAFS,oBAETA,KA0BT,OAxBA9C,qBAAU,WACT,IAAM+C,EAAc3F,EAAG6C,WAAW,SAASG,YAC1C,SAACC,GAAD,OACCwC,EACCxC,EAASC,KAAKC,KAAI,SAACL,GAAD,MAAU,CAC3BV,GAAIU,EAAIV,GACRgB,KAAMN,EAAIM,eAGb,SAACC,GACAC,QAAQD,MAAM,gCAAiCA,MAIjD,OAAO,WACNsC,OAEC,IAQF,yBAAKlE,UAAU,WACd,yBAAKA,UAAU,mBACd,kBAACyC,EAAA,EAAD,CACCC,IAAG,kDAA6CuB,EAAKE,YAAlD,UAEJ,4BAAKF,EAAKE,aACV,yBAAKnE,UAAU,uBAAuBC,QAZrB,WACnBmE,aAAaC,QACbC,OAAOC,SAASC,WAWb,kBAACC,EAAA,EAAD,KACC,kBAAC,IAAD,SAWH,yBAAKzE,UAAU,kBACd,kBAAC,EAAD,CAAaU,YAAU,IAEtBqD,EAAMrC,KAAI,SAACgD,GAAD,OACV,kBAAC,EAAD,CAAaC,IAAKD,EAAK/D,GAAIA,GAAI+D,EAAK/D,GAAIC,KAAM8D,EAAK/C,KAAKf,a,kECnD9C,SAASgE,IAAQ,IAAD,EACJvE,mBAAS,IADL,mBACvBwE,EADuB,KAChBC,EADgB,KAEtBC,EAAWC,cAAXD,OAFsB,EAGE1E,mBAAS,IAHX,mBAGvBgC,EAHuB,KAGb4C,EAHa,OAIE5E,mBAAS,IAJX,mBAIvBQ,EAJuB,KAIbC,EAJa,OAKET,mBAAS,IALX,mBAKvB6E,EALuB,KAKbC,EALa,OAMXvB,IAAVK,EANqB,oBAMrBA,KAET9C,qBAAU,WAAO,IAAD,IACTW,EAAe,IAAIC,KAAJ,UACpBlB,EAASA,EAASuE,OAAS,UADP,iBACpB,EAA+BpD,YADX,aACpB,EAAqCC,UAEhCC,EAEW,gBAAhBJ,EACG,GACAA,EAAauD,WACb,SACAvD,EAAawD,UACb,eACCxD,EAAaK,WAAa,GAAK,IAAM,IACtCL,EAAaK,WACb,KACCL,EAAaM,aAAe,GAAK,IAAM,IACxCN,EAAaM,aACjB+C,EAAYjD,KACV,CAACrB,IAEJM,qBAAU,WACL4D,IACHxG,EAAG6C,WAAW,SACZC,IAAI0D,GACJxD,YACA,SAACC,GACIA,EAASG,QACZsD,EAAYzD,EAASG,OAAOf,SAG9B,SAACgB,GACAC,QAAQD,MAAM,+BAAgCA,MAIjDrD,EAAG6C,WAAW,SACZC,IAAI0D,GACJ3D,WAAW,WACXE,QAAQ,OAAQ,OAChBC,YACA,SAACC,GAAD,OAAcV,EAAYU,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,cACzD,SAACC,GACAC,QAAQD,MACP,2CACAmD,EACAnD,SAKH,CAACmD,IAiCJ,OACC,yBAAK/E,UAAU,QACd,yBAAKA,UAAU,gBACd,kBAACyC,EAAA,EAAD,CACCC,IAAG,qDAAgDqC,EAAhD,UAEJ,yBAAK/E,UAAU,oBACd,yBAAKA,UAAU,wBAAwBqC,GACvC,yBAAKrC,UAAU,mBACd,mEAAWkF,KAGb,yBAAKlF,UAAU,qBACd,kBAACyE,EAAA,EAAD,KACC,kBAAC,IAAD,SAIH,yBAAKzE,UAAU,cACba,EAASa,KAAI,SAACiB,EAAS4C,GAAV,OACb,yBACCZ,IAAKY,EACLvF,UAAS,qBACR2C,EAAQ/B,OAASqD,EAAKE,aAAe,mBAGtC,yBACCnE,UAAS,UACR2C,EAAQ/B,OAASqD,EAAKE,aAAe,uBAGtC,kBAAC1B,EAAA,EAAD,CACCC,IAAG,kDAA6CC,EAAQ/B,KAArD,WAGL,yBAAKZ,UAAU,iBACd,uBAAGA,UAAU,cAAc2C,EAAQ/B,MACnC,uBAAGZ,UAAU,cACX2C,EAAQ/B,OAASqD,EAAKE,YACpB,GAlDc,SAACqB,GACxB,IAAMxD,EAAO,IAAID,KAAKyD,EAAEvD,UAOxB,OALED,EAAKG,WAAa,GAAK,IAAM,IAC9BH,EAAKG,WACL,KACCH,EAAKI,aAAe,GAAK,IAAM,IAChCJ,EAAKI,aA4CGqD,CAAgB9C,EAAQX,OAE5B,uBAAGhC,UAAU,iBAAiB2C,EAAQA,eAK1C,yBAAK3C,UAAU,gBACd,yBAAKA,UAAU,oBACd,kBAAC,IAAD,MACA,8BACC,kBAAC0F,EAAA,EAAD,CACC1F,UAAU,oBACV2F,kBAAkB,EAClBjC,MAAOmB,EACPe,SAAU,SAACC,GACVf,EAASe,EAAEC,OAAOpC,QAEnBqC,UAAU,MACVC,KAAK,SAEN,4BAAQ/F,QA5FO,SAAC4F,GAChBd,IACHc,EAAEhD,iBACmB,KAAjBgC,EAAMoB,SACT1H,EAAG6C,WAAW,SACZC,IAAI0D,GACJ3D,WAAW,WACXmB,IAAI,CACJI,QAASkC,EACTjE,KAAMqD,EAAKE,YACXnC,KAAM5C,IAEN8D,OAAM,SAACtB,GACPC,QAAQD,MAAM,0BAA2BiD,EAAOjD,MAElDkD,EAAS,OA6EuBkB,KAAK,YAEpC,kBAAC,IAAD,S,4BCpKQzC,EAAe,CAC3BU,KAAMG,aACH8B,KAAKC,MAAM/B,aAAagC,QAAQ,0BAChC,MAGSC,EACF,WAiBI/C,EAdC,SAACgD,EAAOC,GAGvB,OADAnC,aAAaoC,QAAQ,wBAAyBN,KAAKO,UAAUF,EAAOtC,OAC5DsC,EAAOP,MACd,KAAKK,EACJ,OAAO,2BACHC,GADJ,IAECrC,KAAMsC,EAAOtC,OAEf,QACC,OAAOqC,I,oCC0FKI,MAvGf,WAAiB,MAEO9C,IAFP,yCAEL+C,EAFK,OAGUtG,mBAAS,IAHnB,mBAGTuG,EAHS,KAGFC,EAHE,OAIgBxG,mBAAS,IAJzB,mBAITyG,EAJS,KAICC,EAJD,OAKQ1G,mBAAS,IALjB,mBAKTO,EALS,KAKHoG,EALG,OAMwB3G,oBAAS,GANjC,mBAMT4G,EANS,KAMKC,EANL,KAwBVC,EAAc,WACnBD,GAAgB,IAiBjB,OAAOD,EACN,yBAAKjH,UAAU,SACd,kBAACoH,EAAA,EAAD,CAAOpH,UAAU,oBAChB,kBAACqH,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACzB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,wCACA,2BACC7B,SAAU,SAACC,GAAD,OAAOgB,EAAShB,EAAEC,OAAOpC,QACnC/C,GAAG,QACHqF,KAAK,QACL0B,YAAY,iBAEb,2BACC9B,SAAU,SAACC,GAAD,OAAOkB,EAAYlB,EAAEC,OAAOpC,QACtC/C,GAAG,WACHqF,KAAK,WACL0B,YAAY,iBAEb,kBAACC,EAAA,EAAD,CAAQ3H,UAAU,iBAAiBC,QAnDxB,WACdd,EACEyI,2BAA2BhB,EAAOE,GAClC9D,MAAK,SAAC6E,GACNlB,EAAS,CACRX,KAAMK,EACNpC,KAAM4D,EAAO5D,UAGdf,OAAM,SAACtB,GAAD,OAAWkG,MAAMlG,EAAMe,cA0C5B,4BAGA,kBAACgF,EAAA,EAAD,CAAQ3H,UAAU,mBAAmBC,QA1CpB,WACpBiH,GAAgB,KAyCb,+BAOH,yBAAKlH,UAAU,SACd,kBAACoH,EAAA,EAAD,CAAOpH,UAAU,oBAChB,kBAACqH,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACzB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,4BACA,2BACC7B,SAAU,SAACC,GAAD,OAAOmB,EAAQnB,EAAEC,OAAOpC,QAClC/C,GAAG,OACHqF,KAAK,OACL0B,YAAY,uBAEb,2BACC9B,SAAU,SAACC,GAAD,OAAOgB,EAAShB,EAAEC,OAAOpC,QACnC/C,GAAG,SACHqF,KAAK,QACL0B,YAAY,iBAEb,2BACC9B,SAAU,SAACC,GAAD,OAAOkB,EAAYlB,EAAEC,OAAOpC,QACtC/C,GAAG,YACHqF,KAAK,WACL0B,YAAY,iBAEb,kBAACC,EAAA,EAAD,CAAQ3H,UAAU,iBAAiBC,QA/DxB,WACdd,EACE4I,+BAA+BnB,EAAOE,GACtC9D,MAAK,SAAC6E,GACN,OAAOA,EAAO5D,KAAK+D,cAAc,CAChC7D,YAAavD,OAGdoC,KAAK8E,MAAM,yCACX5E,OAAM,SAACtB,GAAD,OAAWkG,MAAMlG,EAAMe,YAE/BwE,MAoDG,gBAGA,kBAACQ,EAAA,EAAD,CAAQ3H,UAAU,mBAAmBC,QAASkH,GAA9C,4C,0BCtCUc,MArDf,WAAgB,IAAD,EACKrE,IAAVK,EADK,oBACLA,KADK,EAEkB5D,oBAAS,GAF3B,mBAEP6H,EAFO,KAEGC,EAFH,KAIRC,EAAYC,YAAe,CAChCC,QAAS,CACRtC,KAAMkC,EAAW,OAAS,QAC1BK,WAAY,CACXC,MAAON,EAAW,UAAY,cAKjC,OACC,kBAACO,EAAA,EAAD,CAAeC,MAAON,GACrB,yBAAKpI,UAAU,OACd,0BAAMA,UAAU,UAAhB,YAEC,kBAAC,IAAD,CACC2I,MAAM,UACNC,QAASV,EACTtC,SAAU,kBAAMuC,GAAaD,OAG/B,kBAAC,IAAD,KACGjE,EAKD,kBAACmD,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UACzB,yBAAKvH,UAAU,aACd,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO6I,KAAK,qBACX,kBAAC,EAAD,OAGD,kBAAC,IAAD,CAAOA,KAAK,aACX,kBAAC,EAAD,WAdL,kBAAC,IAAD,CAAOA,KAAK,aACX,kBAAC,EAAD,WCzBaC,QACW,cAA7BxE,OAAOC,SAASwE,UAEe,UAA7BzE,OAAOC,SAASwE,UAEhBzE,OAAOC,SAASwE,SAASC,MACvB,2DCVNnJ,IAASoJ,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,CAAe3F,aAAcA,EAAcD,QAASA,GACnD,kBAAC,EAAD,QAGFpD,SAASiJ,eAAe,SDqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtG,MAAK,SAAAuG,GACJA,EAAaC,gBAEdtG,OAAM,SAAAtB,GACLC,QAAQD,MAAMA,EAAMe,a","file":"static/js/main.aba313b4.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyCy6gePCn95u8zMOLT4UTORjrHDvhRrO2g',\n\tauthDomain: 'chat-49c1d.firebaseapp.com',\n\tdatabaseURL: 'https://chat-49c1d.firebaseio.com',\n\tprojectId: 'chat-49c1d',\n\tstorageBucket: 'chat-49c1d.appspot.com',\n\tmessagingSenderId: '689541832725',\n\tappId: '1:689541832725:web:a747e231a0e0f9998e2e1c',\n\tmeasurementId: 'G-H8CSC7SKMV',\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp();\n// const provider = new firebase.auth.GoogleAuthProvider();\n\n// export {  provider };\nexport { db, auth, timestamp };\n","import React from 'react';\nimport './Modal.css';\nimport ReactDOM from 'react-dom';\n\nfunction Modal({ title, content, visible, hide, confirm }) {\n\treturn visible\n\t\t? ReactDOM.createPortal(\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className='modal-wrapper'>\n\t\t\t\t\t\t<div className='modal'>\n\t\t\t\t\t\t\t<div className='modal-title'>{title}</div>\n\t\t\t\t\t\t\t<div className='modal-content'>{content}</div>\n\t\t\t\t\t\t\t<div className='modal-operator'>\n\t\t\t\t\t\t\t\t<button className='modal-operator-confirm' onClick={confirm}>\n\t\t\t\t\t\t\t\t\t确认\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button className='modal-operator-close' onClick={hide}>\n\t\t\t\t\t\t\t\t\t取消\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='mask'></div>\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>,\n\t\t\t\tdocument.body\n\t\t  )\n\t\t: null;\n}\n\nexport default Modal;\n","import { useState } from 'react';\n\nconst useModal = () => {\n\tconst [isShowing, setIsShowing] = useState(false);\n\n\tfunction toggle() {\n\t\tsetIsShowing(!isShowing);\n\t}\n\n\treturn {\n\t\tisShowing,\n\t\ttoggle,\n\t};\n};\n\nexport default useModal;\n","import React, { useEffect, useState } from 'react';\nimport { Avatar } from '@material-ui/core';\nimport './SidebarChat.css';\nimport { db } from '../../Utilities/Firebase/firebase';\nimport { Link, useHistory } from 'react-router-dom';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Modal from '../../Utilities/Modal/Modal';\nimport useModal from '../../Utilities/Modal/useModal';\n\nfunction SidebarChat({ addNewChat, id, name }) {\n\tconst [messages, setMessages] = useState('');\n\tconst [lastMessageTime, setLastMessageTime] = useState('');\n\tconst { isShowing, toggle } = useModal();\n\tlet history = useHistory();\n\n\tconst createChat = () => {\n\t\tconst roomName = prompt('请输入房间名称');\n\t\tif (roomName) {\n\t\t\tdb.collection('rooms').add({\n\t\t\t\tname: roomName,\n\t\t\t});\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (id) {\n\t\t\tdb.collection('rooms')\n\t\t\t\t.doc(id)\n\t\t\t\t.collection('message')\n\t\t\t\t.orderBy('time', 'desc')\n\t\t\t\t.onSnapshot(\n\t\t\t\t\t(snapshot) => setMessages(snapshot.docs.map((doc) => doc.data())),\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tconsole.error('Error getting message of the room: ', id, error);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t}, [id]);\n\n\tuseEffect(() => {\n\t\tconst lastMesgTime = new Date(messages[0]?.time?.toDate());\n\t\tconst displayTime =\n\t\t\t// eslint-disable-next-line\n\t\t\tlastMesgTime == 'Invalid Date'\n\t\t\t\t? ''\n\t\t\t\t: (lastMesgTime.getHours() < 10 ? '0' : '') +\n\t\t\t\t  lastMesgTime.getHours() +\n\t\t\t\t  ':' +\n\t\t\t\t  (lastMesgTime.getMinutes() < 10 ? '0' : '') +\n\t\t\t\t  lastMesgTime.getMinutes();\n\n\t\tsetLastMessageTime(displayTime);\n\t}, [messages]);\n\n\tconst confirmDelete = (event) => {\n\t\tevent.preventDefault();\n\t\thistory.push('/chatroom');\n\t\tdb.collection('rooms')\n\t\t\t.doc(id)\n\t\t\t.delete()\n\t\t\t.then(() => {\n\t\t\t\tconsole.log('Document successfully deleted!');\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error('Error removing document: ', error);\n\t\t\t});\n\t};\n\n\treturn !addNewChat ? (\n\t\t<Link to={`/chatroom/${id}`}>\n\t\t\t<div className='sidebarChat'>\n\t\t\t\t<Avatar src={`https://avatars.dicebear.com/api/identicon/${id}.svg`} />\n\t\t\t\t<div className='sidebarChat__room'>\n\t\t\t\t\t<div className='sidebarChat__roomName'>{name}</div>\n\t\t\t\t\t<div className='sidebarChat__messageInfo'>\n\t\t\t\t\t\t<div className='sidebarChat__lastMessage'>\n\t\t\t\t\t\t\t{messages[0]?.message}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='sidebarChat__timestamp'>{lastMessageTime}</div>\n\t\t\t\t\t\t<div className='sidebarChat__delete' onClick={toggle}>\n\t\t\t\t\t\t\t<ClearIcon />\n\t\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\t\tvisible={isShowing}\n\t\t\t\t\t\t\t\thide={toggle}\n\t\t\t\t\t\t\t\ttitle='注意'\n\t\t\t\t\t\t\t\troomName={name}\n\t\t\t\t\t\t\t\tcontent={`确认要删除 ${name} 群聊吗？`}\n\t\t\t\t\t\t\t\tconfirm={confirmDelete}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Link>\n\t) : (\n\t\t<div onClick={createChat} className='sidebarChat'>\n\t\t\t<AddBoxIcon /> <p>创建新房间</p>\n\t\t</div>\n\t);\n}\n\nexport default SidebarChat;\n","import React, { createContext, useContext, useReducer } from 'react';\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>\n\t\t{children}\n\t</StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport { Avatar, IconButton } from '@material-ui/core';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n// import SearchOutlined from '@material-ui/icons/SearchOutlined';\nimport SidebarChat from './SidebarChat';\nimport { db } from '../../Utilities/Firebase/firebase';\nimport { useStateValue } from '../../Utilities/Redux/StateProvider';\n\nfunction Sidebar() {\n\tconst [rooms, setRooms] = useState([]);\n\tconst [{ user }] = useStateValue();\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = db.collection('rooms').onSnapshot(\n\t\t\t(snapshot) =>\n\t\t\t\tsetRooms(\n\t\t\t\t\tsnapshot.docs.map((doc) => ({\n\t\t\t\t\t\tid: doc.id,\n\t\t\t\t\t\tdata: doc.data(),\n\t\t\t\t\t}))\n\t\t\t\t),\n\t\t\t(error) => {\n\t\t\t\tconsole.error('Error loading chatting rooms ', error);\n\t\t\t}\n\t\t);\n\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t};\n\t}, []);\n\n\tconst exitAccount = () => {\n\t\tlocalStorage.clear();\n\t\twindow.location.reload();\n\t};\n\n\treturn (\n\t\t<div className='sidebar'>\n\t\t\t<div className='sidebar__header'>\n\t\t\t\t<Avatar\n\t\t\t\t\tsrc={`https://avatars.dicebear.com/api/bottts/${user.displayName}.svg`}\n\t\t\t\t/>\n\t\t\t\t<h2>{user.displayName}</h2>\n\t\t\t\t<div className='sidebar__headerRight' onClick={exitAccount}>\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<ExitToAppIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* <div className='sidebar__search'>\n\t\t\t\t<div className='sidebar__searchContainer'>\n\t\t\t\t\t<SearchOutlined />\n\t\t\t\t\t<input placeholder='搜索聊天房间' type='text' />\n\t\t\t\t</div>\n\t\t\t</div> */}\n\t\t\t<div className='sidebar__chats'>\n\t\t\t\t<SidebarChat addNewChat />\n\n\t\t\t\t{rooms.map((room) => (\n\t\t\t\t\t<SidebarChat key={room.id} id={room.id} name={room.data.name} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Sidebar;\n","import React, { useEffect, useState } from 'react';\nimport { Avatar, IconButton, Input } from '@material-ui/core';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport MicIcon from '@material-ui/icons/Mic';\nimport { useParams } from 'react-router-dom';\nimport './Chat.css';\nimport { db, timestamp } from '../../Utilities/Firebase/firebase';\nimport { useStateValue } from '../../Utilities/Redux/StateProvider';\n\nexport default function Chat() {\n\tconst [input, setInput] = useState('');\n\tconst { roomId } = useParams();\n\tconst [roomName, setRoomName] = useState('');\n\tconst [messages, setMessages] = useState([]);\n\tconst [lastTime, setLastTime] = useState('');\n\tconst [{ user }] = useStateValue();\n\n\tuseEffect(() => {\n\t\tconst lastMesgTime = new Date(\n\t\t\tmessages[messages.length - 1]?.time?.toDate()\n\t\t);\n\t\tconst displayTime =\n\t\t\t// eslint-disable-next-line\n\t\t\tlastMesgTime == 'Invalid Date'\n\t\t\t\t? ''\n\t\t\t\t: lastMesgTime.getMonth() +\n\t\t\t\t  '月' +\n\t\t\t\t  lastMesgTime.getDate() +\n\t\t\t\t  '日     ' +\n\t\t\t\t  (lastMesgTime.getHours() < 10 ? '0' : '') +\n\t\t\t\t  lastMesgTime.getHours() +\n\t\t\t\t  ':' +\n\t\t\t\t  (lastMesgTime.getMinutes() < 10 ? '0' : '') +\n\t\t\t\t  lastMesgTime.getMinutes();\n\t\tsetLastTime(displayTime);\n\t}, [messages]);\n\n\tuseEffect(() => {\n\t\tif (roomId) {\n\t\t\tdb.collection('rooms')\n\t\t\t\t.doc(roomId)\n\t\t\t\t.onSnapshot(\n\t\t\t\t\t(snapshot) => {\n\t\t\t\t\t\tif (snapshot.data()) {\n\t\t\t\t\t\t\tsetRoomName(snapshot.data().name);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tconsole.error('Error loading the room name ', error);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tdb.collection('rooms')\n\t\t\t\t.doc(roomId)\n\t\t\t\t.collection('message')\n\t\t\t\t.orderBy('time', 'asc')\n\t\t\t\t.onSnapshot(\n\t\t\t\t\t(snapshot) => setMessages(snapshot.docs.map((doc) => doc.data())),\n\t\t\t\t\t(error) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'Error loading the messages of the room: ',\n\t\t\t\t\t\t\troomId,\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t}, [roomId]);\n\n\tconst sendMessage = (e) => {\n\t\tif (roomId) {\n\t\t\te.preventDefault();\n\t\t\tif (input.trim() !== '') {\n\t\t\t\tdb.collection('rooms')\n\t\t\t\t\t.doc(roomId)\n\t\t\t\t\t.collection('message')\n\t\t\t\t\t.add({\n\t\t\t\t\t\tmessage: input,\n\t\t\t\t\t\tname: user.displayName,\n\t\t\t\t\t\ttime: timestamp,\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tconsole.error('Error sending message: ', input, error);\n\t\t\t\t\t});\n\t\t\t\tsetInput('');\n\t\t\t}\n\t\t}\n\t};\n\n\tconst messageSendTime = (t) => {\n\t\tconst time = new Date(t.toDate());\n\t\tconst displayTime =\n\t\t\t(time.getHours() < 10 ? '0' : '') +\n\t\t\ttime.getHours() +\n\t\t\t':' +\n\t\t\t(time.getMinutes() < 10 ? '0' : '') +\n\t\t\ttime.getMinutes();\n\t\treturn displayTime;\n\t};\n\n\treturn (\n\t\t<div className='chat'>\n\t\t\t<div className='chat__header'>\n\t\t\t\t<Avatar\n\t\t\t\t\tsrc={`https://avatars.dicebear.com/api/identicon/${roomId}.svg`}\n\t\t\t\t/>\n\t\t\t\t<div className='chat__headerInfo'>\n\t\t\t\t\t<div className='chat__headerRoomName'>{roomName}</div>\n\t\t\t\t\t<div className='chat__timestamp'>\n\t\t\t\t\t\t<p>最近一次聊天 {lastTime}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='chat__headerRight'>\n\t\t\t\t\t<IconButton>\n\t\t\t\t\t\t<MoreHorizIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='chat__body'>\n\t\t\t\t{messages.map((message, index) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tclassName={`chat__info ${\n\t\t\t\t\t\t\tmessage.name === user.displayName && 'chat__receiver'\n\t\t\t\t\t\t}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`${\n\t\t\t\t\t\t\t\tmessage.name === user.displayName && 'chat__receiverIcon'\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\tsrc={`https://avatars.dicebear.com/api/bottts/${message.name}.svg`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='chat__message'>\n\t\t\t\t\t\t\t<p className='chat__name'>{message.name}</p>\n\t\t\t\t\t\t\t<p className='chat__time'>\n\t\t\t\t\t\t\t\t{message.name === user.displayName\n\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t: messageSendTime(message.time)}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p className='chat__content'>{message.message}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className='chat__footer'>\n\t\t\t\t<div className='chat__footerWrap'>\n\t\t\t\t\t<InsertEmoticonIcon />\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tclassName='chat__footerInput'\n\t\t\t\t\t\t\tdisableUnderline={true}\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\tsetInput(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tmaxLength='200'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={sendMessage} type='submit'></button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<MicIcon />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","export const initialState = {\n\tuser: localStorage\n\t\t? JSON.parse(localStorage.getItem('myValueInLocalStorage'))\n\t\t: null,\n};\n\nexport const actionTypes = {\n\tSET_USER: 'SET_USER',\n};\n\nconst reducer = (state, action) => {\n\t// console.log(action);\n\tlocalStorage.setItem('myValueInLocalStorage', JSON.stringify(action.user));\n\tswitch (action.type) {\n\t\tcase actionTypes.SET_USER:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: action.user,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport './Login.css';\nimport { actionTypes } from '../../Utilities/Redux/reducer';\nimport { useStateValue } from '../../Utilities/Redux/StateProvider';\nimport { auth } from '../../Utilities/Firebase/firebase';\nimport { Grid, Typography, Button, Paper } from '@material-ui/core';\n\nfunction Login() {\n\t// eslint-disable-next-line\n\tconst [{}, dispatch] = useStateValue();\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [name, setName] = useState('');\n\tconst [loginVisible, setLoginVisible] = useState(true);\n\n\tconst signIn = () => {\n\t\tauth\n\t\t\t.signInWithEmailAndPassword(email, password)\n\t\t\t.then((result) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: actionTypes.SET_USER,\n\t\t\t\t\tuser: result.user,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => alert(error.message));\n\t};\n\n\tconst switchSignup = () => {\n\t\tsetLoginVisible(false);\n\t};\n\n\tconst switchLogin = () => {\n\t\tsetLoginVisible(true);\n\t};\n\n\tconst signup = () => {\n\t\tauth\n\t\t\t.createUserWithEmailAndPassword(email, password)\n\t\t\t.then((result) => {\n\t\t\t\treturn result.user.updateProfile({\n\t\t\t\t\tdisplayName: name,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(alert('成功注册啦！'))\n\t\t\t.catch((error) => alert(error.message));\n\n\t\tswitchLogin();\n\t};\n\n\treturn loginVisible ? (\n\t\t<div className='login'>\n\t\t\t<Paper className='login__container'>\n\t\t\t\t<Grid container direction='column'>\n\t\t\t\t\t<Typography variant='h4'>一起来聊天吧</Typography>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\tid='email'\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tplaceholder='邮箱'\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\tid='password'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tplaceholder='密码'\n\t\t\t\t\t/>\n\t\t\t\t\t<Button className='signin__button' onClick={signIn}>\n\t\t\t\t\t\t登录账号\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button className='register__button' onClick={switchSignup}>\n\t\t\t\t\t\t注册账号\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Paper>\n\t\t</div>\n\t) : (\n\t\t<div className='login'>\n\t\t\t<Paper className='login__container'>\n\t\t\t\t<Grid container direction='column'>\n\t\t\t\t\t<Typography variant='h4'>注册用户</Typography>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\tid='name'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='用户名'\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\tid='email2'\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tplaceholder='邮箱'\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\tid='password2'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tplaceholder='密码'\n\t\t\t\t\t/>\n\t\t\t\t\t<Button className='signin__button' onClick={signup}>\n\t\t\t\t\t\t注册\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button className='register__button' onClick={switchLogin}>\n\t\t\t\t\t\t返回登录页面\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from '../Sidebar/Sidebar';\nimport Chat from '../ChatPage/Chat';\nimport Login from '../LoginPage/Login';\nimport { useStateValue } from '../../Utilities/Redux/StateProvider';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Switch as Toggle, Grid, Paper } from '@material-ui/core';\n\nfunction App() {\n\tconst [{ user }] = useStateValue();\n\tconst [darkmode, setDarkMode] = useState(true);\n\n\tconst darkTheme = createMuiTheme({\n\t\tpalette: {\n\t\t\ttype: darkmode ? 'dark' : 'light',\n\t\t\tbackground: {\n\t\t\t\tpaper: darkmode ? '#303030' : '#ededed',\n\t\t\t},\n\t\t},\n\t});\n\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t<div className='app'>\n\t\t\t\t<span className='toggle'>\n\t\t\t\t\tDark Mode\n\t\t\t\t\t<Toggle\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tchecked={darkmode}\n\t\t\t\t\t\tonChange={() => setDarkMode(!darkmode)}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t\t<Router>\n\t\t\t\t\t{!user ? (\n\t\t\t\t\t\t<Route path='/chatroom'>\n\t\t\t\t\t\t\t<Login />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Paper>\n\t\t\t\t\t\t\t<Grid container direction='column'>\n\t\t\t\t\t\t\t\t<div className='app__body'>\n\t\t\t\t\t\t\t\t\t<Sidebar />\n\t\t\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t\t\t<Route path='/chatroom/:roomId'>\n\t\t\t\t\t\t\t\t\t\t\t<Chat />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t\t<Route path='/chatroom'>\n\t\t\t\t\t\t\t\t\t\t\t<Chat />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Paper>\n\t\t\t\t\t)}\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './Utilities/Redux/reducer';\nimport { StateProvider } from './Utilities/Redux/StateProvider';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<StateProvider initialState={initialState} reducer={reducer}>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}